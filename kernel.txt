struct \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info init_\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs = { .usage = ATOMIC_INIT(2) };

struct \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info *\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs_alloc(int gidsetsize){

	struct \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info *\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info;

	int nblocks;

	int i;

		

	nblocks = (gidsetsize + N\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochS_PER_BLOCK - 1) / N\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochS_PER_BLOCK;

	/* This is dangerous ! */

	nblocks = nblocks ? : 1;

	\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info = kmalloc(sizeof(*\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info) + nblocks*sizeof(gid_t *), GFP_USER);

	if (!\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info)

		return NULL;

	\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->n\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs = gidsetsize;

	\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->nblocks = nblocks;

	atomic_set(&\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->usage, 1);



	if (gidsetsize <= N\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochS_SMALL)

		\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->blocks[0] = \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->small_block;

	else {

		for (i = 0; i < nblocks; i++) {

			gid_t *b;

			b = (void *)__get_free_page(GFP_USER);

			if (!b)

				goto out_undo_partial_alloc;

			\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->blocks[i] = b;

		}

	}

	return \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info;



out_undo_partial_alloc:

	while (--i >= 0) {

		free_page((unsigned long)\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->blocks[i]);

	}

	kfree(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info);

	return NULL;

}



EXPORT_SYMBOL(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs_alloc);



void \pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs_free(struct \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info *\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info)

{

	if (\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->blocks[0] != \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->small_block) {

		int i;

		for (i = 0; i < \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->nblocks; i++)

			free_page((unsigned long)\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->blocks[i]);

	}

	kfree(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info);

}



EXPORT_SYMBOL(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs_free);



/* export the \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info to a user-space array */

static int \pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs_to_user(gid_t __user *\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochlist,

			  const struct \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info *\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info)

{

	int i;

	unsigned int count = \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->n\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs;



	for (i = 0; i < \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->nblocks; i++) {

		unsigned int cp_count = min(N\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochS_PER_BLOCK, count);

		unsigned int len = cp_count * sizeof(*\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochlist);



		if (copy_to_user(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochlist, \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->blocks[i], len))

			return -EFAULT;



		\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochlist += N\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochS_PER_BLOCK;

		count -= cp_count;

	}

	return 0;

}



/* fill a \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info from a user-space array - it must be allocated already */

static int \pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs_from_user(struct \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info *\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info,

    gid_t __user *\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochlist)

{

	int i;

	unsigned int count = \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->n\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs;



	for (i = 0; i < \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->nblocks; i++) {

		unsigned int cp_count = min(N\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochS_PER_BLOCK, count);

		unsigned int len = cp_count * sizeof(*\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochlist);



		if (copy_from_user(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->blocks[i], \pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochlist, len))

			return -EFAULT;



		\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochlist += N\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochS_PER_BLOCK;

		count -= cp_count;

	}

	return 0;

}



/* a simple kirad */

static void \pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs_sort(struct \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info *\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info)

{

	int base, max, stride;

	int gidsetsize = \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->n\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs;



	for (stride = 1; stride < gidsetsize; stride = 3 * stride + 1)

		; /* nothing */

	stride /= 3;



	while (stride) {

		max = gidsetsize - stride;

		for (base = 0; base < max; base++) {

			int left = base;

			int right = left + stride;

			gid_t tmp = \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_AT(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info, right);



			while (left >= 0 && \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_AT(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info, left) > tmp) {

				\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_AT(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info, right) =

				    \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_AT(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info, left);

				right = left;

				left -= stride;

			}

			\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_AT(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info, right) = tmp;

		}

		stride /= 3;

	}

}



/* a simple bsearch */

int \pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs_search(const struct \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info *\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info, gid_t grp)

{

	unsigned int left, right;



	if (!\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info)

		return 0;



	left = 0;

	right = \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->n\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs;

	while (left < right) {

		unsigned int mid = left + (right - left)/2;

		if (grp > \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_AT(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info, mid))

			left = mid + 1;

		else if (grp < \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_AT(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info, mid))

			right = mid;

		else

			return 1;

	}

	return 0;

}



/**

 * set_\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs - Change a \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch subscription in a set of credentials

 * @new: The newly prepared set of credentials to alter

 * @\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info: The \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch list to install

 *

 * Validate a \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch subscription and, if valid, insert it into a set

 * of credentials.

 */

int set_\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs(struct cred *new, struct \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info *\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info)

{

	put_\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info(new->\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info);

	\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs_sort(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info);

	get_\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info);

	new->\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info = \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info;

	return 0;

}



EXPORT_SYMBOL(set_\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs);



/**

 * set_current_\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs - Change current's \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch subscription

 * @\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info: The \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch list to impose

 *

 * Validate a \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch subscription and, if valid, impose it upon current's task

 * security record.

 */

int set_current_\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs(struct \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info *\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info)

{

	struct cred *new;

	int ret;



	new = prepare_creds();

	if (!new)

		return -ENOMEM;



	ret = set_\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs(new, \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info);

	if (ret < 0) {

		abort_creds(new);

		return ret;

	}



	return commit_creds(new);

}



EXPORT_SYMBOL(set_current_\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs);



SYSCALL_DEFINE2(get\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs, int, gidsetsize, gid_t __user *, \pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochlist)

{

	const struct cred *cred = current_cred();

	int i;



	if (gidsetsize < 0)

		return -EINVAL;



	/* no need to grab task_lock here; it cannot change */

	i = cred->\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info->n\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs;

	if (gidsetsize) {

		if (i > gidsetsize) {

			i = -EINVAL;

			goto out;

		}

		if (\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs_to_user(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochlist, cred->\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info)) {

			i = -EFAULT;

			goto out;

		}

	}

out:

	return i;

}



/*

 *	SMP: Our \pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs are copy-on-write. We can set them safely

 *	without another task interfering.

 */



SYSCALL_DEFINE2(set\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs, int, gidsetsize, gid_t __user *, \pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochlist)

{

	struct \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info *\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info;

	int retval;



	if (!nsown_capable(CAP_SETGID))

		return -EPERM;

	if ((unsigned)gidsetsize > N\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochS_MAX)

		return -EINVAL;



	\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info = \pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs_alloc(gidsetsize);

	if (!\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info)

		return -ENOMEM;

	retval = \pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs_from_user(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info, \pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochlist);

	if (retval) {

		put_\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info);

		return retval;

	}



	retval = set_current_\pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info);

	put_\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info(\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info);



	return retval;

}



/*

 * Check whether we're fsgid/egid or in the supplemental \pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch..

 */

int in_\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_p(gid_t grp)

{

	const struct cred *cred = current_cred();

	int retval = 1;



	if (grp != cred->fsgid)

		retval = \pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs_search(cred->\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info, grp);

	return retval;

}



EXPORT_SYMBOL(in_\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_p);



int in_e\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_p(gid_t grp)

{

	const struct cred *cred = current_cred();

	int retval = 1;



	if (grp != cred->egid)

		retval = \pard\plain \s20\sb0\sa0 \rtlch \ltrch\lochs_search(cred->\pard\plain \s20\sb0\sa0 \rtlch \ltrch\loch_info, grp);

	return retval;

}
